{"_id":"otplib","_rev":"65-14f7922f429e12cf528acaa746e2cf97","name":"otplib","time":{"modified":"2018-07-23T00:38:00.174Z","created":"2014-04-14T02:36:39.432Z","0.0.1":"2014-04-14T02:36:39.432Z","0.0.2":"2014-04-14T06:14:17.562Z","0.0.3":"2014-04-14T06:19:29.103Z","1.0.0":"2014-04-14T07:16:21.374Z","1.1.0":"2014-05-13T09:26:26.285Z","1.1.1":"2014-10-20T15:02:44.735Z","1.1.2":"2014-10-21T07:39:51.996Z","2.0.0":"2015-08-21T15:22:55.267Z","3.0.0":"2015-09-12T16:28:12.899Z","3.0.1":"2015-09-12T16:46:56.195Z","4.0.1":"2017-04-15T06:11:33.754Z","4.0.2":"2017-04-15T06:43:12.446Z","4.0.3":"2017-04-15T07:08:27.125Z","4.0.4":"2017-04-15T07:09:26.861Z","4.0.5":"2017-04-15T15:30:17.414Z","4.0.6":"2017-04-15T15:58:33.398Z","5.0.0":"2017-07-29T05:32:03.431Z","5.1.0":"2017-08-19T09:51:45.708Z","5.1.1":"2017-08-19T10:05:09.197Z","6.0.0":"2017-09-02T15:14:17.601Z","6.0.1":"2017-09-03T12:10:46.956Z","6.0.2":"2017-09-04T05:11:32.605Z","6.0.3":"2017-09-04T05:49:00.579Z","7.0.0-0":"2017-10-14T08:33:01.994Z","7.0.0-1":"2017-10-20T15:33:13.291Z","7.0.0":"2017-10-22T13:25:38.672Z","7.1.0":"2018-02-27T16:12:14.872Z","8.0.0-1":"2018-03-03T17:08:29.380Z","8.0.0":"2018-03-27T14:36:22.956Z","8.0.1":"2018-03-27T14:41:35.149Z","9.0.0-0":"2018-04-21T17:31:02.681Z","9.0.0":"2018-04-22T04:52:18.566Z","10.0.0-0":"2018-06-11T14:50:07.897Z","10.0.0-1":"2018-06-11T16:54:32.674Z","10.0.0-2":"2018-06-12T15:00:13.377Z","10.0.0-3":"2018-06-12T15:30:48.050Z","10.0.0-4":"2018-06-14T00:20:25.343Z","10.0.0-6":"2018-06-15T04:58:21.972Z","10.0.0-7":"2018-06-17T06:10:14.953Z","10.0.0":"2018-06-17T07:51:31.732Z","10.0.1":"2018-07-23T00:37:57.871Z"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"dist-tags":{"latest":"10.0.1","next":"10.0.0-7"},"versions":{"0.0.3":{"name":"otplib","version":"0.0.3","main":"lib/index.js","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","homepage":"https://github.com/yeojz/otplib","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com","url":"http://fusedthought.com"},"repository":{"type":"git","url":"https://github.com/yeojz/otplib.git"},"licenses":[{"type":"MIT"}],"files":[],"keywords":["otp","totp","hotp","one time password","google authenticator","authentication"],"devDependencies":{"grunt-contrib-jshint":"~0.7.0","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.0","jshint-stylish":"~0.1.3","load-grunt-tasks":"~0.2.0","prompt":"^0.2.12","time-grunt":"~0.2.0"},"scripts":{"test":"grunt"},"dependencies":{"thirty-two":"0.0.1"},"_id":"otplib@0.0.3","dist":{"shasum":"e796668227cbd9e37a9f34cdbaed0e3e3ffa62ec","tarball":"https://registry.npmjs.org/otplib/-/otplib-0.0.3.tgz"},"_from":"otplib","_npmVersion":"1.4.6","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{}},"1.0.0":{"name":"otplib","version":"1.0.0","main":"lib/index.js","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","homepage":"https://github.com/yeojz/otplib","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com","url":"http://fusedthought.com"},"repository":{"type":"git","url":"https://github.com/yeojz/otplib.git"},"licenses":[{"type":"MIT"}],"files":[],"keywords":["otp","totp","hotp","one time password","google authenticator","authentication"],"devDependencies":{"grunt-contrib-jshint":"~0.7.0","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.0","jshint-stylish":"~0.1.3","load-grunt-tasks":"~0.2.0","prompt":"^0.2.12","time-grunt":"~0.2.0"},"scripts":{"test":"grunt"},"dependencies":{"thirty-two":"0.0.1"},"_id":"otplib@1.0.0","dist":{"shasum":"c6c86b7a08c7d72ac5547bd8020a45ca51eee9dc","tarball":"https://registry.npmjs.org/otplib/-/otplib-1.0.0.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{}},"1.1.0":{"name":"otplib","version":"1.1.0","main":"lib/index.js","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","homepage":"https://github.com/yeojz/otplib","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com","url":"http://fusedthought.com"},"repository":{"type":"git","url":"https://github.com/yeojz/otplib.git"},"licenses":[{"type":"MIT"}],"files":[],"keywords":["otp","totp","hotp","one time password","google authenticator","authentication"],"devDependencies":{"grunt-contrib-jshint":"~0.7.0","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.0","jshint-stylish":"~0.1.3","load-grunt-tasks":"~0.2.0","prompt":"^0.2.12","time-grunt":"~0.2.0"},"scripts":{"test":"grunt"},"dependencies":{"thirty-two":"0.0.1"},"_id":"otplib@1.1.0","_shasum":"5f76f2ff4702a4d0fbb115473746046b7a2cadf5","_from":".","_npmVersion":"1.4.10","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"dist":{"shasum":"5f76f2ff4702a4d0fbb115473746046b7a2cadf5","tarball":"https://registry.npmjs.org/otplib/-/otplib-1.1.0.tgz"},"directories":{}},"1.1.1":{"name":"otplib","version":"1.1.1","main":"lib/index.js","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","homepage":"https://github.com/yeojz/otplib","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com","url":"http://fusedthought.com"},"repository":{"type":"git","url":"https://github.com/yeojz/otplib.git"},"licenses":[{"type":"MIT"}],"files":[],"keywords":["otp","totp","hotp","one time password","google authenticator","authentication"],"devDependencies":{"grunt-contrib-jshint":"~0.7.0","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.0","jshint-stylish":"~0.1.3","load-grunt-tasks":"~0.2.0","prompt":"^0.2.12","time-grunt":"~0.2.0"},"scripts":{"test":"grunt"},"dependencies":{"thirty-two":"0.0.1"},"gitHead":"d3f980f1801e1b88130aa6bb4cff564b43b3ce5d","_id":"otplib@1.1.1","_shasum":"4bf5e0c1c4da137ae512e0d98986460589bed495","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.32","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"dist":{"shasum":"4bf5e0c1c4da137ae512e0d98986460589bed495","tarball":"https://registry.npmjs.org/otplib/-/otplib-1.1.1.tgz"},"directories":{}},"1.1.2":{"name":"otplib","version":"1.1.2","main":"lib/index.js","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","homepage":"https://github.com/yeojz/otplib","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com","url":"http://fusedthought.com"},"repository":{"type":"git","url":"https://github.com/yeojz/otplib.git"},"licenses":[{"type":"MIT"}],"files":[],"keywords":["otp","totp","hotp","one time password","google authenticator","authentication","2FA","2 factor"],"devDependencies":{"grunt-contrib-jshint":"~0.7.0","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.0","jshint-stylish":"~0.1.3","load-grunt-tasks":"~0.2.0","prompt":"^0.2.12","time-grunt":"~0.2.0"},"scripts":{"test":"grunt"},"dependencies":{"thirty-two":"0.0.1"},"gitHead":"7df9e024c243ed12dd4828448ba6eacbbee41052","_id":"otplib@1.1.2","_shasum":"01dcccc477a0e9a588712884801d62208318bff0","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.32","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"dist":{"shasum":"01dcccc477a0e9a588712884801d62208318bff0","tarball":"https://registry.npmjs.org/otplib/-/otplib-1.1.2.tgz"},"directories":{}},"2.0.0":{"name":"otplib","version":"2.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"src/index.js","scripts":{"test":"mocha ./test","build":"browserify -r ./src/index.js:otplib > ./bin/otplib.js"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authentication","2FA","2 factor","node","browser","browserify"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://github.com/yeojz/otplib","devDependencies":{"browserify":"^8.1.1","expect.js":"^0.3.1","mocha":"^2.1.0","prompt":"^0.2.12"},"dependencies":{"thirty-two":"0.0.2"},"gitHead":"dcb32032d0e948d005259222bb532670bd4830c9","_id":"otplib@2.0.0","_shasum":"b22cc9b5d3d3e0799cd80ae4b0c8799d7111048c","_from":".","_npmVersion":"2.13.0","_nodeVersion":"0.10.38","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"dist":{"shasum":"b22cc9b5d3d3e0799cd80ae4b0c8799d7111048c","tarball":"https://registry.npmjs.org/otplib/-/otplib-2.0.0.tgz"},"directories":{}},"3.0.0":{"name":"otplib","version":"3.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"lib/index.js","scripts":{"build":"babel ./src --out-dir ./lib","clean":"rm -rf ./lib","compile":"npm run build && export NODE_ENV=production && webpack","compile-docs":"node_modules/jsdoc/jsdoc.js -c jsdoc.json","ghpages":"git subtree split --prefix dist -b gh-pages && git push -f origin gh-pages:gh-pages && git branch -D gh-pages","prepublish":"npm run build && npm run compile","publish-site":"npm run compile && npm run compile-docs && npm run ghpages","test":"mocha --compilers js:babel/register test/specs/**/*.js"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://github.com/yeojz/otplib","devDependencies":{"babel":"^5.8.21","babel-loader":"^5.3.2","chai":"^3.2.0","jsdoc":"git+https://github.com/jsdoc3/jsdoc.git","mocha":"^2.1.0","prompt":"^0.2.12","webpack":"^1.11.0"},"dependencies":{"thirty-two":"0.0.2"},"gitHead":"f938099918fa7aa9269ace5e8083f5f402bf58ba","_id":"otplib@3.0.0","_shasum":"9a5d57cffea5a31273647a41a164af6b35d6a06f","_from":".","_npmVersion":"2.14.3","_nodeVersion":"0.10.40","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"dist":{"shasum":"9a5d57cffea5a31273647a41a164af6b35d6a06f","tarball":"https://registry.npmjs.org/otplib/-/otplib-3.0.0.tgz"},"directories":{}},"3.0.1":{"name":"otplib","version":"3.0.1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"lib/index.js","scripts":{"build":"babel ./src --out-dir ./lib","clean":"rm -rf ./lib","compile":"npm run build && export NODE_ENV=production && webpack","compile-docs":"node_modules/jsdoc/jsdoc.js -c jsdoc.json","ghpages":"git subtree split --prefix dist -b gh-pages && git push -f origin gh-pages:gh-pages && git branch -D gh-pages","prepublish":"npm run build && npm run compile","publish-site":"npm run compile && npm run compile-docs && npm run ghpages","test":"mocha --compilers js:babel/register test/specs/**/*.js"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://github.com/yeojz/otplib","devDependencies":{"babel":"^5.8.21","babel-loader":"^5.3.2","chai":"^3.2.0","jsdoc":"git+https://github.com/jsdoc3/jsdoc.git","mocha":"^2.1.0","prompt":"^0.2.12","webpack":"^1.11.0"},"dependencies":{"thirty-two":"0.0.2"},"gitHead":"aa9d1ac3fd3702458399ee9246b2c36cfd317a5d","_id":"otplib@3.0.1","_shasum":"0360ffcfe318355c2fd4a5495c1fe067afebdd57","_from":".","_npmVersion":"2.14.3","_nodeVersion":"0.10.40","_npmUser":{"name":"geraldyeo","email":"contact@fusedthought.com"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"dist":{"shasum":"0360ffcfe318355c2fd4a5495c1fe067afebdd57","tarball":"https://registry.npmjs.org/otplib/-/otplib-3.0.1.tgz"},"directories":{}},"4.0.1":{"name":"otplib","version":"4.0.1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://github.com/yeojz/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","ncp":"^2.0.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"randombytes":"^2.0.3","thirty-two":"1.0.2"},"_id":"otplib@4.0.1","_shasum":"84d74e4399a601f27f958babab4b5c5315b00b41","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"84d74e4399a601f27f958babab4b5c5315b00b41","tarball":"https://registry.npmjs.org/otplib/-/otplib-4.0.1.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/otplib-4.0.1.tgz_1492236691444_0.9412869666703045"},"directories":{}},"4.0.2":{"name":"otplib","version":"4.0.2","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"_id":"otplib@4.0.2","_shasum":"3e80e9c1b49309f24e11ff4a42000f98c2c2ee22","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"3e80e9c1b49309f24e11ff4a42000f98c2c2ee22","tarball":"https://registry.npmjs.org/otplib/-/otplib-4.0.2.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/otplib-4.0.2.tgz_1492238590280_0.31429814640432596"},"directories":{}},"4.0.3":{"name":"otplib","version":"4.0.3","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"_id":"otplib@4.0.3","_shasum":"ee4bdb9129934ba5db9ad82ce83aeca8b6b1bd59","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"ee4bdb9129934ba5db9ad82ce83aeca8b6b1bd59","tarball":"https://registry.npmjs.org/otplib/-/otplib-4.0.3.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/otplib-4.0.3.tgz_1492240104941_0.4429601398296654"},"directories":{}},"4.0.4":{"name":"otplib","version":"4.0.4","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"_id":"otplib@4.0.4","_shasum":"d4ebb037c72a576890f0815690fdf5d075d59983","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"d4ebb037c72a576890f0815690fdf5d075d59983","tarball":"https://registry.npmjs.org/otplib/-/otplib-4.0.4.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/otplib-4.0.4.tgz_1492240164657_0.7007056146394461"},"directories":{}},"4.0.5":{"name":"otplib","version":"4.0.5","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"_id":"otplib@4.0.5","_shasum":"0d6fe73d2b1f9e23c6cc60dc5bf170efb9ff91d5","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"0d6fe73d2b1f9e23c6cc60dc5bf170efb9ff91d5","tarball":"https://registry.npmjs.org/otplib/-/otplib-4.0.5.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/otplib-4.0.5.tgz_1492270215330_0.18575470801442862"},"directories":{}},"4.0.6":{"name":"otplib","version":"4.0.6","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"_id":"otplib@4.0.6","_shasum":"b63db56cb5f66320886ac39534328cb0c3fa86d3","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.10.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"b63db56cb5f66320886ac39534328cb0c3fa86d3","tarball":"https://registry.npmjs.org/otplib/-/otplib-4.0.6.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/otplib-4.0.6.tgz_1492271912635_0.6681453159544617"},"directories":{}},"5.0.0":{"name":"otplib","version":"5.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"gitHead":"2700becee22119b0e8d99bb0ebceb7e98290264c","_id":"otplib@5.0.0","_shasum":"f5470a239585fc91e02a9736680deb2f5da41973","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.1","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"f5470a239585fc91e02a9736680deb2f5da41973","tarball":"https://registry.npmjs.org/otplib/-/otplib-5.0.0.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-5.0.0.tgz_1501306322174_0.5742979750502855"},"directories":{}},"5.1.0":{"name":"otplib","version":"5.1.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"gitHead":"93cb33046f3f829c02f5213bcd0142d32a7d76d9","_id":"otplib@5.1.0","_shasum":"49799a56954d0c500e488230d326bb4cc45366d0","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"49799a56954d0c500e488230d326bb4cc45366d0","tarball":"https://registry.npmjs.org/otplib/-/otplib-5.1.0.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-5.1.0.tgz_1503136304476_0.3023616662248969"},"directories":{}},"5.1.1":{"name":"otplib","version":"5.1.1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"index.js","scripts":{"build":"npm-run-all build:src build:dist","build:src":"cross-env NODE_ENV=production babel src --out-dir .","build:dist":"cross-env NODE_ENV=production OTPLIB_WEBPACK=true webpack","build:docs":"jsdoc --configure jsdoc.json --verbose","build:site":"cross-env BUILD_FOLDER=./site/dist/lib npm run build:dist","deploy-gh-pages":"./build-page.sh","clean":"rimraf core classes impl utils coverage .nyc_output docs","coverage":"cross-env NODE_ENV=test nyc report --reporter=lcov","coveralls":"cross-env NODE_ENV=test nyc report --reporter=text-lcov | coveralls","lint":"eslint --ext js src tests","test":"cross-env NODE_ENV=test NODE_PATH=. npm run test:run","test:run":"nyc --reporter=text-summary mocha 'tests/**/*.spec.js'","test:watch":"npm run test -- -- --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.24.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-rewire":"^1.0.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-export-extensions":"^6.22.0","babel-plugin-transform-object-rest-spread":"^6.23.0","babel-preset-es2015":"^6.24.0","chai":"^3.5.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","cross-env":"^4.0.0","eslint":"^3.19.0","jsdoc":"^3.4.3","minami":"^1.1.1","mocha":"^3.2.0","npm-run-all":"^4.0.2","nyc":"^10.2.0","rimraf":"^2.6.1","sinon":"^2.1.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"gitHead":"dd221300901c26f0f781c0384c2bf580e250cf09","_id":"otplib@5.1.1","_shasum":"e08a9ff8fa79c26bc5472ea42d3271dc01257932","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"e08a9ff8fa79c26bc5472ea42d3271dc01257932","tarball":"https://registry.npmjs.org/otplib/-/otplib-5.1.1.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-5.1.1.tgz_1503137108161_0.26186283049173653"},"directories":{}},"6.0.0":{"name":"otplib","version":"6.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:copy":"cp ./{README.md,LICENSE,package.json,yarn.lock,.npmignore} ./dist","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@6.0.0","_shasum":"f73a1bbc9920a629f1a6bc6521856dae0744d4a4","_from":".","_npmVersion":"4.2.0","_nodeVersion":"6.7.0","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"f73a1bbc9920a629f1a6bc6521856dae0744d4a4","tarball":"https://registry.npmjs.org/otplib/-/otplib-6.0.0.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-6.0.0.tgz_1504365257472_0.7221971964463592"},"directories":{}},"6.0.1":{"name":"otplib","version":"6.0.1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:copy":"cp ./{README.md,LICENSE,package.json,yarn.lock,.npmignore} ./dist","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"gitHead":"2ff9d1fb8961b4078518943205ad5599e95d3574","_id":"otplib@6.0.1","_shasum":"0905ee99dacc38e4a00f2093e4f36f4b25a0b3f1","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"0905ee99dacc38e4a00f2093e4f36f4b25a0b3f1","tarball":"https://registry.npmjs.org/otplib/-/otplib-6.0.1.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-6.0.1.tgz_1504440645725_0.3421119705308229"},"deprecated":"build package was not published correctly","directories":{}},"6.0.2":{"name":"otplib","version":"6.0.2","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:copy":"cp ./{README.md,LICENSE,package.json,yarn.lock,.npmignore} ./dist","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"gitHead":"884d03443543f55141e8e9c59490a4b6b892bb68","_id":"otplib@6.0.2","_shasum":"39154a4fd106915603af7157ffc85cea819f960b","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"39154a4fd106915603af7157ffc85cea819f960b","tarball":"https://registry.npmjs.org/otplib/-/otplib-6.0.2.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-6.0.2.tgz_1504501891301_0.37684197281487286"},"deprecated":"build package was not published correctly","directories":{}},"6.0.3":{"name":"otplib","version":"6.0.3","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@6.0.3","_shasum":"daae5d1d09fcc96938d390949192891ed19062db","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"daae5d1d09fcc96938d390949192891ed19062db","tarball":"https://registry.npmjs.org/otplib/-/otplib-6.0.3.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-6.0.3.tgz_1504504139384_0.4687551374081522"},"directories":{}},"7.0.0-0":{"name":"otplib","version":"7.0.0-0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@7.0.0-0","_shasum":"88040a081f98e0913837aad0758ba371e6487d2b","_from":".","_npmVersion":"4.2.0","_nodeVersion":"6.7.0","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"88040a081f98e0913837aad0758ba371e6487d2b","tarball":"https://registry.npmjs.org/otplib/-/otplib-7.0.0-0.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-7.0.0-0.tgz_1507969981923_0.24919156287796795"},"directories":{}},"7.0.0-1":{"name":"otplib","version":"7.0.0-1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@7.0.0-1","_shasum":"1f5cabbe841b1fb82b8ca397fd7888ca06defa32","_from":".","_npmVersion":"4.2.0","_nodeVersion":"6.7.0","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"1f5cabbe841b1fb82b8ca397fd7888ca06defa32","tarball":"https://registry.npmjs.org/otplib/-/otplib-7.0.0-1.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-7.0.0-1.tgz_1508513593185_0.18100278940983117"},"directories":{}},"7.0.0":{"name":"otplib","version":"7.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/dist/","/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@7.0.0","_shasum":"c48ad39fafff4a452ec753ad9c2369fb0b3380ea","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.4","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"c48ad39fafff4a452ec753ad9c2369fb0b3380ea","tarball":"https://registry.npmjs.org/otplib/-/otplib-7.0.0.tgz"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib-7.0.0.tgz_1508678737399_0.2875529157463461"},"directories":{}},"7.1.0":{"name":"otplib","version":"7.1.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint --ext js src","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-core":"^6.24.1","babel-eslint":"^7.2.1","babel-loader":"^6.4.1","babel-plugin-module-resolver":"^2.7.1","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-es2015":"^6.24.0","coveralls":"^2.13.0","create-hmac":"^1.1.4","eslint":"^3.19.0","jest":"^20.0.4","jsdoc":"^3.4.3","minami":"^1.1.1","rimraf":"^2.6.1","rollup":"^0.49.2","rollup-plugin-cleanup":"^1.0.1","rollup-plugin-node-resolve":"^3.0.0","webpack":"^2.3.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/dist/","/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@7.1.0","_shasum":"0ed5458f4381e9a528eee9d608202e2e2a505c32","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.13.0","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"shasum":"0ed5458f4381e9a528eee9d608202e2e2a505c32","tarball":"https://registry.npmjs.org/otplib/-/otplib-7.1.0.tgz","fileCount":13,"unpackedSize":270874},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_7.1.0_1519747934729_0.7536920162514971"}},"8.0.0-1":{"name":"otplib","version":"8.0.0-1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint \"packages/**/**\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^22.4.2","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.11.1","rimraf":"^2.6.1","rollup":"^0.56.3","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.0.1","webpack-cli":"^2.0.10"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/dist/","/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"readme":"# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n[![Support Project][donate-badge]][donate-link]\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed-secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n\n## Installation\n\nInstall the library via:\n\n```\n$ npm install otplib --save\n```\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n__Example Usage__\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^6.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~96Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type     | Defaults                          | Description                                                                                         |\n| ---------------- | -------- | --------------------------------- | --------------------------------------------------------------------------------------------------- |\n| algorithm        | string   | 'sha1'                            | Algorithm used for HMAC                                                                             |\n| createHmacSecret | function | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                             |\n| crypto           | object   | node crypto                       | Crypto module to use.                                                                               |\n| digits           | integer  | 6                                 | The length of the token                                                                             |\n| encoding         | string   | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                     |\n| epoch (totp)     | integer  | null                              | starting time since the UNIX epoch (seconds). _Note_ non-javascript epoch. i.e. `Date.now() / 1000` |\n| step (totp)      | integer  | 30                                | Time step (seconds)                                                                                 |\n| window (totp)    | integer  | 0                                 | Tokens in the previous x-windows that should be considered valid                                    |\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install node-qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-Welcome-ff69b4.svg?style=flat-square\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n","readmeFilename":"README.md","_id":"otplib@8.0.0-1","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-KV8XU0C/8RWBptMAfKTwwZBd4H1gUZ69Hhvg5xwu60n9eOZhElPxg+VD7ie0wg1wTdlHa/Susr0IU4xXmcbFow==","shasum":"f1202c3b1491d11b3af0aeff6b7ef0f0b2868953","tarball":"https://registry.npmjs.org/otplib/-/otplib-8.0.0-1.tgz","fileCount":11,"unpackedSize":131392},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_8.0.0-1_1520096909288_0.20130149768671246"}},"8.0.0":{"name":"otplib","version":"8.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint \"packages/**/**\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^22.4.2","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.11.1","rimraf":"^2.6.1","rollup":"^0.56.3","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.0.1","webpack-cli":"^2.0.10"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/dist/","/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@8.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-xYFoZe1bZu9zS5XyJDvYR+e2AxOxjOJDEQVZ3sgMLKBZJOAlz2Rr41+0SDPS7xiyWRtKmdtG47k/uLNrkJ8B3w==","shasum":"af42846319ab75c99b08bc5ca2539c0bce678052","tarball":"https://registry.npmjs.org/otplib/-/otplib-8.0.0.tgz","fileCount":11,"unpackedSize":131771},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_8.0.0_1522161382825_0.7509409799018933"}},"8.0.1":{"name":"otplib","version":"8.0.1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint \"packages/**/**\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^22.4.2","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.11.1","rimraf":"^2.6.1","rollup":"^0.56.3","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.0.1","webpack-cli":"^2.0.10"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/dist/","/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@8.0.1","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-dtW+K211t2MR/8zNoLP0/l46vdhJ+Y7bv4qOaPEktXVjYCxTU6P4Y0/g8DZ49A20ILMHHORP6SzM+7a8wj+sYQ==","shasum":"ff770e689192c08d0ab068ca755d34e776baceb2","tarball":"https://registry.npmjs.org/otplib/-/otplib-8.0.1.tgz","fileCount":11,"unpackedSize":131771},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_8.0.1_1522161695071_0.05275034929947431"}},"9.0.0-0":{"name":"otplib","version":"9.0.0-0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint \"packages/**/**\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^22.4.2","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.11.1","rimraf":"^2.6.1","rollup":"^0.56.3","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.0.1","webpack-cli":"^2.0.10"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/dist/","/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"readme":"# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n[![Support Project][donate-badge]][donate-link]\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed-secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n**Example Usage**\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  window: 1,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^8.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~96Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type             | Defaults                          | Description                                                                                                                                                                  |\n| ---------------- | ---------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| algorithm        | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                      |\n| createHmacSecret | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                      |\n| crypto           | object           | node crypto                       | Crypto module to use.                                                                                                                                                        |\n| digits           | integer          | 6                                 | The length of the token                                                                                                                                                      |\n| encoding         | string           | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                                                                                              |\n| epoch (totp)     | integer          | null                              | starting time since the UNIX epoch (seconds). _Note_ non-javascript epoch. i.e. `Date.now() / 1000`                                                                          |\n| step (totp)      | integer          | 30                                | Time step (seconds)                                                                                                                                                          |\n| window (totp)    | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. If integer, same value will be used for both. Alternatively, define array: `[previous, future]` |\n\n_Note 1_: non \"totp\" label applies to all\n_Note 2_: \"totp\" applies to authenticator as well\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n","readmeFilename":"README.md","_id":"otplib@9.0.0-0","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-OYTKmCDfYEchehnpOmSrxC0D8lq0TZAXtya3yE6AMsLR1P9FDJnV9eIFJoYRfLY4R9X0jgaLI7uyRuIpTCUHsg==","shasum":"2f47b7fc66a6ed3866a565f7993228df30879fe0","tarball":"https://registry.npmjs.org/otplib/-/otplib-9.0.0-0.tgz","fileCount":11,"unpackedSize":134266,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa23VXCRA9TVsSAnZWagAA2MsP/jjd3uZzAzYA/6nE3RM+\nmf8YLWc5e2L+XxnpvVpEGl2sJM1ok8yu+oVlkRZrcozbYAma8u40BJB8CBRH\nPuoa3zf34z+ZY8/V88TrNGWo/Sl3eB6kDX1anv8KWgjL1XhnVUxgIns4NyZl\nU0mp0ckoXA50T00IJaQRx2yJ1KGrNQdclAcMNmeAEbSRECriUZwxx68sADBj\nTmaV7JpE3ILLFkUBPF8wEzwndkXLzz+3QWwF/vewk32fh2Xt8phvjkT4ohQO\nR0tyHjlULAX4Pdb5guN353HRGgMveoX7PE7D8CSkIzh01BJO9Xg/CRAJ8FXh\nzipbFM7J1lykbh+WUukJU/3llvKzTMyixi7WZg5ZWxVm/kq6Yd6C4OP/wCwk\nLGayeLzqijFoU6ezr4Q2wGkHVDkVQyMTxGYdsnLLz/OYBEDw99h+NBg1sGVj\nkGA7/Z6f5zrmdtvuxgDZC+6cxc4/IiXqA4H22y49mgYhWT5ZmiNzIyZrCEV/\nPikQyGa8vQ+npdqwgkD5U3EMEJQOqEOnaofhPMFK1TY5RUjhstEaNzC5uzlH\nCrsfYKW+ltEShqG3wqgQWJNaJ+BSHC/I6Q7mhdekZ1F0oMbgbuxpzWiFJjWC\n9hFXqjRvox//G1vvmA/TXK19mtzpgq9RtZNiEA8KYMqdkWqLsQQonOc+YqTn\nJSYK\r\n=D9Bc\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_9.0.0-0_1524331862545_0.8781009962040911"}},"9.0.0":{"name":"otplib","version":"9.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"otplib.js","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint":"eslint \"packages/**/**\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^22.4.2","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.11.1","rimraf":"^2.6.1","rollup":"^0.56.3","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.0.1","webpack-cli":"^2.0.10"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/dist/","/node_modules/","<rootDir>/scripts/*","<rootDir>/tests/"]},"_id":"otplib@9.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-iyhiRRqNdW5vZIrAXqrjHUu9yonn/yiqwmkAIo0rstki3h9dH5inpOkGNynMEBSheykkivcjTTGreC1O/eRx6A==","shasum":"d61b095f933c0938c3b515d3ee5c201641680977","tarball":"https://registry.npmjs.org/otplib/-/otplib-9.0.0.tgz","fileCount":11,"unpackedSize":134252,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3BUECRA9TVsSAnZWagAAR8wP/3phW07n0uUOO/Iu3CZR\nZn6tqt1L1YxGb7nYDVFTuxnQEGeFzRhrlQ0tfMT+sgZ4nLu3X+rbt3sxwe/S\nN97Gu8U+qcJ2lVlC00i8Oct+QlI7ThXyojZbZ6MxDli/qNqewko4UEU4tDsh\nQjMOc8ARamcdGIK6qxwArtLp9IyuuP4Av8NUIx0wKJJnDEIsyMH+O/gDOOfC\nvl6kXEC87CU17pacpP3TA+cMt/x6bW6/fjmsZY80niPMwoQ8TLVK9cgK919Z\nBvT2kXsycMlnDijAtgib85xlytoBj8qKgFHi5JC1D+Mkqp32EufZ1+u1MJkS\n3pGExVXvjCa9mbdnfrcrRSeZf+BTp52xZ7vaUW2YH2rc1t/m/yTNYxYp8a52\neLRLnhp4zcNpSNd8iuQa2j3Z2lZc2rd2p//ak9YaLIzAPUCKo1iz1ytSmMv2\nPoW1xx8qFAeHIOkJnHeBqYqkJhVqGvBwjU1zBgSzPzbVXG9719TT7GDcSwTx\njrJjUQkPAvn/P7tm+YSyQi9wrXdbon0bIHKZE1y1XKqu3WQ3BNz+nli3Z0yC\nmEEMX1SjITvPjsNpAZzs4/u+reD5zee4+eDQVqMibIC2Pd0dOyodAe4pBsrR\nm9E4IzDPOLc6LSzITkHfoE/5NRnR+6uUVnmTV24lqcHJ7vWQV6NyXKDbQECZ\nsipM\r\n=gsKU\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_9.0.0_1524372738486_0.9755883086771497"}},"10.0.0-0":{"name":"otplib","version":"10.0.0-0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","types":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","build:types":"./scripts/build-types.sh","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.12.1","rimraf":"^2.6.1","rollup":"^0.59.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*","<rootDir>/dist/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/dist/*","<rootDir>/scripts/*","<rootDir>/tests/"]},"repl":[{"name":"otplib","module":"./dist/index"}],"readme":"# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n[![Support Project][donate-badge]][donate-link]\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed-secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n* [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n**Example Usage**\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  window: 1,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^8.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~96Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type             | Defaults                          | Description                                                                                                                                                                  |\n| ---------------- | ---------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| algorithm        | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                      |\n| createHmacSecret | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                      |\n| crypto           | object           | node crypto                       | Crypto module to use.                                                                                                                                                        |\n| digits           | integer          | 6                                 | The length of the token                                                                                                                                                      |\n| encoding         | string           | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                                                                                              |\n| epoch (totp)     | integer          | null                              | starting time since the UNIX epoch (seconds). _Note_ non-javascript epoch. i.e. `Date.now() / 1000`                                                                          |\n| step (totp)      | integer          | 30                                | Time step (seconds)                                                                                                                                                          |\n| window (totp)    | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. If integer, same value will be used for both. Alternatively, define array: `[previous, future]` |\n\n_Note 1_: non \"totp\" label applies to all\n_Note 2_: \"totp\" applies to authenticator as well\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n","readmeFilename":"README.md","_id":"otplib@10.0.0-0","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-0X+KIebPycKw5lM54xUXcA4+en437jRI48lyqvZXK/iivz3r0R5omER6tg1GI5s2e4z/ZjkbUG6yNd5ZFMysKg==","shasum":"bae22cdb426d2647b798cae6be95096d833af866","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0-0.tgz","fileCount":13,"unpackedSize":187890,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbHowgCRA9TVsSAnZWagAAJJsP/0WxY0c3D4OFILdFlp00\npsCD4fomUfJptVwqYqzsdyT9MeTtpXMI9O0XRfPuq6SwAfTuwiheifdMKrci\nGcpo3NTRtXeiXa6kHZgs3n/KFzozn+b++Wbji5TSYxe4nGYmCtxw13MTQ9oA\nPqgHPvhdlU3t23DU0y9LVagnkhj++8c+Hw4g1xc2SH+U6d3R3yhh1U1epCfb\nP2nOmPsIYqjWeJeEF1LWPyoKBh6jXNWIWKjIHZdw+vyMVjAwg2KOVF4cQRIx\ncf3Ovj4Ohr+a4H9xTjrbO5Hi4uAae7yGjkO1EVgzJoYvZftaH4QND2NARt8K\nsZ6pr9X7yQfal7DaVAdTEXmXS8ANgBOdTIZOOzZyGr8aIuyPC7aLWWA+Wlk7\nP41WJDswTGOqBOhK43UYlAAV4oWDwnGDT8abgG6b93rYeMqYWqjX9xII2OSV\nOiuwPAWda5ZnDe2rxiQ1r7B1KTMzeIxSwWI53Nths9WM8Lm8AaeUKf6FXxk1\nR6qPYDpOipb7fwnwgFJP/O2jRmUI2XlvItU5XaooqNTx1NqYgivaX0d+aFk2\nzVnzdDmHd26SIg0+xv+LZjY4GRIh/eJ5bHPSLtLPD6aVCG0j8ULrubHS36aq\nU/lCFBShX2w5vl8SINfR5xhyltlhsWaDGcgwCIxPyUcdA8ddc1l5+JyctCgZ\n/RDS\r\n=JVqB\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0-0_1528728607804_0.25760409903577886"}},"10.0.0-1":{"name":"otplib","version":"10.0.0-1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","types":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","build:types":"./scripts/build-types.sh","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.12.1","rimraf":"^2.6.1","rollup":"^0.59.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2","@types/node":"latest","typescript":"next"},"optionalDependencies":{"@types/node":"latest","typescript":"next"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":["<rootDir>/scripts/*","<rootDir>/dist/*"],"modulePaths":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/","<rootDir>/dist/*","<rootDir>/scripts/*","<rootDir>/tests/"]},"repl":[{"name":"otplib","module":"./dist/index"}],"readme":"# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [TypeScript Support](#typescript-support)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed---secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n* [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n**Example Usage**\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  window: 1,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^8.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~96Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### TypeScript Support\n\nAs of `v10.0.0`, TypeScript definition files are included within the package.\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type             | Defaults                          | Description                                                                                                                                                                  |\n| ---------------- | ---------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| algorithm        | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                      |\n| createHmacSecret | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                      |\n| crypto           | object           | node crypto                       | Crypto module to use.                                                                                                                                                        |\n| digits           | integer          | 6                                 | The length of the token                                                                                                                                                      |\n| encoding         | string           | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                                                                                              |\n| epoch (totp)     | integer          | null                              | starting time since the UNIX epoch (seconds). _Note_ non-javascript epoch. i.e. `Date.now() / 1000`                                                                          |\n| step (totp)      | integer          | 30                                | Time step (seconds)                                                                                                                                                          |\n| window (totp)    | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. If integer, same value will be used for both. Alternatively, define array: `[previous, future]` |\n\n_Note 1_: non \"totp\" label applies to all\n_Note 2_: \"totp\" applies to authenticator as well\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n[![Support Project][coffee-badge]][coffee-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n[coffee-badge]: https://img.shields.io/badge/%E2%98%95%EF%B8%8F%20%20-buy%20me%20a%20coffee-orange.svg?longCache=true&style=flat-square\n[coffee-link]: https://ko-fi.com/geraldyeo\n","readmeFilename":"README.md","_id":"otplib@10.0.0-1","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-Ody1VkaNBJbtfZySL2d2lRk3qnEvKZz1HrRLHmfJWQind8x+1mdiJj/M96rcNbQE2ck1mC0BPfDltZaa3bX9Ng==","shasum":"d69242a206426da4002c542ff0328dfd6dcb30ed","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0-1.tgz","fileCount":12,"unpackedSize":188310,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbHqlICRA9TVsSAnZWagAAZpgQAJ6ysNYfBYl21tVovW2s\nnSDSxBdAnVQ87vWxcVfbMOcsxuN43o0pGpSODCDwxCROHFSPzEguNzG4hXEp\nD4DzR+kIzc/CEZJdslE+gqc2qMeHEB0I2TpzrYiA/z7ozCM1mvRIIPombGRS\ntsXNqAFKEukzmSQ2UyyGSPeEjXPFAcsQ33cmgHOlJMiB97gSU9gdTTddtNLu\n2sg+pRPOVM/06sKeLFUYpLqU1Ua5MJPCRUKva2OkjO6Yz2ihqRkDtJfwsLys\n1mgcMDuCrdGe+m7GcPDbUEVOQrlhMRuRWttjcby4xf+lMJvljX3+Uf4CrFVW\n/1HPREyaNm1OYl4nkHADe858lkoT4fbOPbgVbz/AK2DPJCaFvhWEarERMcA1\n0zRUPO1e+ukN3g3TxSrqj1Wr92HDvPFo9roTtgVTQ0xInoJwQdJUKxwg9iRE\n9JwYsd6hPlm1cQl7WC5VzGHBoxgq5QpnRhqnWd0d6KFVeOFTS2WU8M0eDt9I\nDMTIhUC7ihCOoREMSjcATrfWTNm1ofKNjq3HgP/sGTAj3dxSUhO7ICKvf0lc\nCewExxP3NQu9+HIwP0czM2Ke+dY/kdVbMaGZB/npyOYRHZf4BN2cXE0EXwsg\n+Yyo1/gB8xlGJm0awIeT6alWKfgtQuKv5QgxjlCTC4pXcBZxNeZF3rWu/yo+\nyun9\r\n=CnVm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0-1_1528736072550_0.44525688014091624"}},"10.0.0-2":{"name":"otplib","version":"10.0.0-2","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","types":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","build:types":"./scripts/build-types.sh","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.12.1","rimraf":"^2.6.1","rollup":"^0.59.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2","@types/node":"latest","typescript":"next"},"optionalDependencies":{"@types/node":"latest","typescript":"next"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":[],"modulePaths":["<rootDir>/packages/"],"roots":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/"]},"repl":[{"name":"otplib","module":"./dist/index"}],"readme":"\n# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![TypeScript Support][type-ts-badge]][type-ts-link]\n\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [TypeScript Support](#typescript-support)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed---secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n* [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n**Example Usage**\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  window: 1,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^8.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~96Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### TypeScript Support\n\nAs of `v10.0.0`, TypeScript definition files are included within the package.\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type             | Defaults                          | Description                                                                                                                                                                  |\n| ---------------- | ---------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| algorithm        | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                      |\n| createHmacSecret | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                      |\n| crypto           | object           | node crypto                       | Crypto module to use.                                                                                                                                                        |\n| digits           | integer          | 6                                 | The length of the token                                                                                                                                                      |\n| encoding         | string           | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                                                                                              |\n| epoch (totp)     | integer          | null                              | starting time since the UNIX epoch (seconds). _Note_ non-javascript epoch. i.e. `Date.now() / 1000`                                                                          |\n| step (totp)      | integer          | 30                                | Time step (seconds)                                                                                                                                                          |\n| window (totp)    | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. If integer, same value will be used for both. Alternatively, define array: `[previous, future]` |\n\n_Note 1_: non \"totp\" label applies to all\n_Note 2_: \"totp\" applies to authenticator as well\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n[![Support Project][coffee-badge]][coffee-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/welcome-PRs-brightgreen.svg?style=flat-square&longCache=true\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n[coffee-badge]: https://img.shields.io/badge/%E2%98%95%EF%B8%8F%20-buy%20me%20a%20coffee-orange.svg?longCache=true&style=flat-square\n[coffee-link]: https://ko-fi.com/geraldyeo\n[type-ts-badge]: https://img.shields.io/badge/included-.d.ts-blue.svg?style=flat-square&longCache=true\n[type-ts-link]: https://github.com/yeojz/otplib/tree/master/packages/types-ts\n","readmeFilename":"README.md","_id":"otplib@10.0.0-2","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-3dOZjbqzHo7Itp+IHLwVCXYAx8Vh2wQteJFUVvm6TMFlAGOKi4sLRSX2A/OWn+XeYvT5ky8nYmITUvtw/gYIxQ==","shasum":"d245f9dfa0cb7e932b7c6912159fc7ccb6b7e919","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0-2.tgz","fileCount":12,"unpackedSize":190087,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbH9/+CRA9TVsSAnZWagAAqd8P/1szlR/jd7ucprrk43gQ\n9tW2RWfK+FK3x51JMurTV5wBKFy3DGn8XyD5Y/c8y1KKQK4o6h38cVOpu57l\nQoWt3RTDmMOo3VDF0BhfGhW+ZXQF+QofZPzA0W+Xi3DA41vY23xxRYwbBJWE\nQt2WIz8Ge6jLvyulz+OCj8fBnKOJtLDN/SIbjTpMR1RUsBihXkfqjpmLbVUG\nCjZ5cz/e2ozxGQxZNAwv++To6Or9iX02PZszKyTwczBfTwP7n33NIe3DLlGJ\nWZ8b/5+e2pYfIQS3lYSALDQ4qaJDXLVLSXVqichrPwE3DVMmuqC99UQTjBS8\n6RcEKzIl/q8UtWNSPlen8nFLhC1YEerqfbCj1bxfS+42skVBpCsuqYIoDm/J\n11ZNU3eB8w5Zddjj1/B819VNQiv3GAYjQYaNfYASq8cL01USfkvbGUuGu8e4\nfYhUFOr1UNHPdHECzniaZh+/o91kq+uQSzSrxgoBmzeG854mvctNtf0c8YWU\n4A8P+eXDYj5ml/Ro0+e8f5VE9T3iafOM1lNEdGNJIA9Sz9wRwN7yqrZGUZky\n/6SCppqqoCOVCPlL08AgeUxzZiltehrp8jtphdP4vNDrLT2c+xp135prxJvd\n2HjM4+NQayjBajKM9lL+F6c1VuvWuBI4N+C4pDBQTG2yuH/HQOURe9Q2HLZg\ntMLt\r\n=lLyh\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0-2_1528815613281_0.6676642629523415"}},"10.0.0-3":{"name":"otplib","version":"10.0.0-3","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","types":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"./scripts/build-module.sh","build:rollup":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","build:types":"./scripts/build-types.sh","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-cli":"^6.26.0","babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-plugin-transform-class-properties":"^6.23.0","babel-plugin-transform-object-assign":"^6.22.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.12.1","rimraf":"^2.6.1","rollup":"^0.59.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2","@types/node":"latest","typescript":"next"},"optionalDependencies":{"@types/node":"latest","typescript":"next"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":[],"modulePaths":["<rootDir>/packages/"],"roots":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/"]},"repl":[{"name":"otplib","module":"./dist/index"}],"readme":"\n# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![TypeScript Support][type-ts-badge]][type-ts-link]\n\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [TypeScript Support](#typescript-support)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed---secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n* [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n**Example Usage**\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  window: 1,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^8.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~96Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### TypeScript Support\n\nAs of `v10.0.0`, TypeScript definition files are included within the package.\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type             | Defaults                          | Description                                                                                                                                                                  |\n| ---------------- | ---------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| algorithm        | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                      |\n| createHmacSecret | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                      |\n| crypto           | object           | node crypto                       | Crypto module to use.                                                                                                                                                        |\n| digits           | integer          | 6                                 | The length of the token                                                                                                                                                      |\n| encoding         | string           | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                                                                                              |\n| epoch (totp)     | integer          | null                              | starting time since the UNIX epoch (seconds). _Note_ non-javascript epoch. i.e. `Date.now() / 1000`                                                                          |\n| step (totp)      | integer          | 30                                | Time step (seconds)                                                                                                                                                          |\n| window (totp)    | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. If integer, same value will be used for both. Alternatively, define array: `[previous, future]` |\n\n_Note 1_: non \"totp\" label applies to all\n_Note 2_: \"totp\" applies to authenticator as well\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n[![Support Project][coffee-badge]][coffee-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/welcome-PRs-brightgreen.svg?style=flat-square&longCache=true\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n[coffee-badge]: https://img.shields.io/badge/%E2%98%95%EF%B8%8F%20-buy%20me%20a%20coffee-orange.svg?longCache=true&style=flat-square\n[coffee-link]: https://ko-fi.com/geraldyeo\n[type-ts-badge]: https://img.shields.io/badge/included-.d.ts-blue.svg?style=flat-square&longCache=true\n[type-ts-link]: https://github.com/yeojz/otplib/tree/master/packages/types-ts\n","readmeFilename":"README.md","_id":"otplib@10.0.0-3","_npmVersion":"5.6.0","_nodeVersion":"8.11.2","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-5KKAcXdNXsx6bvLgzWxxXKFZby/KHG3X/ePpL3CmQnVKNjaEfGWhzlk20QzA10zewmp3t0drbPfhpBwpz+qARA==","shasum":"6c2b24c5a0a5ccf39c653e9d0abde0302f54d058","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0-3.tgz","fileCount":12,"unpackedSize":190165,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbH+coCRA9TVsSAnZWagAAorUP/1noXS3Nr7HDTha/ka3X\nVtCoTrmd5s35TG7SkMuRco0DanuFmri5YAzVeDwOlh6F3yjiJdqjdFnfIyWb\nzCxjAgUgAccNqcMpMlryw6Y/ExdOBkklmHKYwzP7Vi031oyBX5ctOBmZSkz9\nOf1UUXtiVXGt12Y0IkKFPppBCyZQV9iZ9GCWDncqsqbKyfZY2Stp43Nbk1SD\n3rgku8A2s7Hvvq1/djogAXMZT8UCGzq2d3VNpTeFMQ1EFVdIt59B1Sr0FHGB\nZpuQmbzl4IbsbFoGaV58ArhE4AcTFngzCTOHHPPKz2UNhlfKG30TrN2fU1Is\n4yK/Z+VJ0WqGICeD1p2VDl3s12sOXfrsst1KxcKzmUmQi9nx4oe90EbLkvMS\nti5f9LzsiTpMxXKYBBNQ7y2S+jPO88gHW9hM47wBg2N9Uha83KNmtjO14Mka\nI+8VYqQgRVNQ7eNV4RfoDwQEASBGp3fP2kSJ2pAapPGj5ZjrOgeYlJUhQ6K9\nLDNovtsmtWtcrlToaPhZ5mnVlP9qe+ToH1dKy2ZNTWUsPDPlvmBZWc19HKXy\nubQM4UCxVXA3xAao+oKhTK099jOzhygx/WWHpDU6Wk9+Cd6mXoqqUCtRDh8F\nmMq86Qi5F+rH/6yyChqqSHkQay11HDdiNqTzEH8l2fwjFzptpyr1+oOByHlI\nFrfm\r\n=1qx5\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0-3_1528817447929_0.33742888676087834"}},"10.0.0-4":{"name":"otplib","version":"10.0.0-4","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","typings":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:browser":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json --verbose","build:module":"rollup -c scripts/rollup.config.js","build:transpile":"babel dist --out-dir dist","build:types":"./scripts/build-types.sh","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","deploy-gh-pages":"./scripts/build-site.sh","deploy-package":"./scripts/build-publish.sh","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.13.5","rimraf":"^2.6.1","rollup":"^0.60.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":[],"modulePaths":["<rootDir>/packages/"],"roots":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/"]},"repl":[{"name":"otplib","module":"./dist/index"}],"readme":"\n# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![TypeScript Support][type-ts-badge]][type-ts-link]\n\n---\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n  - [Type Definitions](#type-definitions)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed---secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n* [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n\n# Additional dependencies for TypeScript\n$ npm install @types/node\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n### Type Definitions\n\n`TypeScript` support was introduced in `v10.0.0`\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n**Example Usage**\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  window: 1,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^10.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~106Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type             | Defaults                          | Description                                                                                                                                                                  |\n| ---------------- | ---------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| algorithm        | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                      |\n| createHmacSecret | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                      |\n| crypto           | object           | node crypto                       | Crypto module to use.                                                                                                                                                        |\n| digits           | integer          | 6                                 | The length of the token                                                                                                                                                      |\n| encoding         | string           | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                                                                                              |\n| epoch (totp)     | integer          | null                              | Starting time since the UNIX epoch (seconds).                                                                                                                                |\n| step (totp)      | integer          | 30                                | Time step (seconds)                                                                                                                                                          |\n| window (totp)    | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. If integer, same value will be used for both. Alternatively, define array: `[previous, future]` |\n\n_Note 1_: epoch format is non-javascript. i.e. `Date.now() / 1000`\n\n_Note 2_: non \"totp\" label applies to all\n\n_Note 3_: \"totp\" applies to authenticator as well\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n[![Support Project][coffee-badge]][coffee-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&longCache=true\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n[coffee-badge]: https://img.shields.io/badge/%E2%98%95%EF%B8%8F%20-buy%20me%20a%20coffee-orange.svg?longCache=true&style=flat-square\n[coffee-link]: https://ko-fi.com/geraldyeo\n[type-ts-badge]: https://img.shields.io/badge/typedef-.d.ts-blue.svg?style=flat-square&longCache=true\n[type-ts-link]: https://github.com/yeojz/otplib/tree/master/packages/types-ts\n","readmeFilename":"README.md","_id":"otplib@10.0.0-4","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-ra4iz+hSPJZBR0SP00L3kGk7CEOvGvgB2reuhbpOv4LaEtq10y5wZ8SvU8TicryQZcfcsBibo5j/FJhw4NJRjQ==","shasum":"5a529a6e50b1f999c45450d472ff9e5f4fdcbc3b","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0-4.tgz","fileCount":12,"unpackedSize":192705,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbIbTKCRA9TVsSAnZWagAAXJ8P/2IW4l/7YhikZ/BhB4jd\nmj7f9KzScci3zsZYbmT1WcMTCLn4kw1qY0UHPKO/+zOTw3EbCmwGfqEujjua\nC9WR01Uq+OYQaw4M/Ow8XuSQNF7/0aFKxpn3INzmokjwfFVj5uNdqwvvxQkx\nSnbOJs47WSknQUxV432RQKoNj9pHUeSPPVrN0PMlHWw+UJNeF03/WMd0Hp7Q\nU3wp7KPsJtbLR5s79j+GgdzYuUnlLphCMSV3t5K0KLaahFciv5WXxVPFxiGl\nIwSfyWs91oS0Q69xZnbxQQgbD2EMPftPG51oVZF3xaYJsUJFn2sv6Cb2Wvly\n79OIwiPt4ISfVaY7+xM3nSfoZdEGBWm4Ujo8sQYnET1GDrkXflI07kKx2EBz\n8vmC1a7lrfncXpTlqAWkV9opkvkgrkYTgyudIe14UBwDM1rZNIDGeQ4IF4iK\nv5jIfNyFZMYs4JuYWdVOd8OMjeE9Ql031dnD2WwljDAbLV5Oz3eMYxXRkipP\nq8qb8Yd+U/Fg1wCV2Eu2uBkxSGoa+8rfm5jktBDaz76v/bK70+4XqFID9C5y\nmlFfTGdL3ELOQ0yqAElS3ReOrns7dOFW6u+vx7+3mKe6Pq9n1r8gYS+PgCoo\np43FeMXvZnsM8sYjmdLJstzgUyS7OuFpDgh80AU/U5kic78+xMY5q7OvSCuX\nDpFV\r\n=pi56\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0-4_1528935625285_0.43472033289162315"}},"10.0.0-6":{"name":"otplib","version":"10.0.0-6","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","typings":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:bundles":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json","build:modules":"rollup -c scripts/rollup.config.js","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.13.5","rimraf":"^2.6.1","rollup":"^0.60.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":[],"modulePaths":["<rootDir>/packages/"],"roots":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/"]},"repl":[{"name":"otplib","module":"./dist/index"}],"readme":"\n# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![TypeScript Support][type-ts-badge]][type-ts-link]\n\n---\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n  - [Type Definitions](#type-definitions)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed---secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n- [Contributing](#contributing)\n- [License](#license)\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226] and [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238], and are tested against the test vectors provided in their respective RFC specifications. These datasets can be found in the `packages/tests` folder.\n\n* [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n* [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator), and includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n* [Documentation][project-docs]\n* [Demo][project-web]\n* [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n\n# Additional dependencies for TypeScript\n$ npm install @types/node\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n### Type Definitions\n\n`TypeScript` support was introduced in `v10.0.0`\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes. Please check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information, especially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions in the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = otplib.authenticator.generateSecret();\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(123456, secret);\n// or\nconst isValid = otplib.authenticator.verify({\n  secret,\n  token: 123456\n});\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Note**: If you import the libraries directly, you'll have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\ni.e.\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\nauthenticator.options = { crypto };\n\n// Or if you're using the other options\n// hotp.options = { crypto }\n// totp.options = { crypto }\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n```\n\n**Example Usage**\n\n```js\nimport { Authenticator } from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nconst authenticator = new Authenticator();\n\nauthenticator.options = {\n  secret: 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD',\n  algorithm: 'sha512',\n  step: 20,\n  digits: 8,\n  window: 1,\n  crypto\n};\n\nconst token = authenticator.generate(); // 55644304\n```\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n* Download from [gh-pages][project-lib].\n* Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^10.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in recent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\n**Output sizes:**\n\n* with node crypto: ~311Kb\n* with alternative crypto: ~106Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific environment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                     | description                                   |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option           | Type             | Defaults                          | Description                                                                                                                                                                  |\n| ---------------- | ---------------- | --------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| algorithm        | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                      |\n| createHmacSecret | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                      |\n| crypto           | object           | node crypto                       | Crypto module to use.                                                                                                                                                        |\n| digits           | integer          | 6                                 | The length of the token                                                                                                                                                      |\n| encoding         | string           | 'ascii' ('hex' for Authenticator) | The encoding of secret which is given to digest                                                                                                                              |\n| epoch (totp)     | integer          | null                              | Starting time since the UNIX epoch (seconds).                                                                                                                                |\n| step (totp)      | integer          | 30                                | Time step (seconds)                                                                                                                                                          |\n| window (totp)    | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. If integer, same value will be used for both. Alternatively, define array: `[previous, future]` |\n\n_Note 1_: epoch format is non-javascript. i.e. `Date.now() / 1000`\n\n_Note 2_: non \"totp\" label applies to all\n\n_Note 3_: \"totp\" applies to authenticator as well\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected length for respective algrorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use other base32 encoding methods (like Crockford's Base 32) but it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan instead of manually entering the secret.\nGoogle Authenticator and similar apps take in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n[![Support Project][coffee-badge]][coffee-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&longCache=true\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n[coffee-badge]: https://img.shields.io/badge/%E2%98%95%EF%B8%8F%20-buy%20me%20a%20coffee-orange.svg?longCache=true&style=flat-square\n[coffee-link]: https://ko-fi.com/geraldyeo\n[type-ts-badge]: https://img.shields.io/badge/typedef-.d.ts-blue.svg?style=flat-square&longCache=true\n[type-ts-link]: https://github.com/yeojz/otplib/tree/master/packages/types-ts\n","readmeFilename":"README.md","_id":"otplib@10.0.0-6","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-mo0PzpCl52bjCQX07ED2v29Es+KyKmruF5GJN/hlZKzvYriqz4fpAEiF69U603q1Mrj/zHIBHiUzh6TDdlK/OQ==","shasum":"d1806ce93433d80f9f00ffd013c0e328b095f4cf","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0-6.tgz","fileCount":12,"unpackedSize":192495,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbI0duCRA9TVsSAnZWagAAr+wP/RhNJRSBKh1lREs81ijB\n7lALPJ0tyw8OiVbW22Qx3yMwEW5KxmbbUpo5rjT8fYnQswnYcehigwiRl9kX\nU5Qops3C96f2TlUngJgCAydC+9MCwPVyXkuFSUrTeIxtTf7NYE7KxS0cwU/g\nzLDj9YGvErMueBo/QFXxhwUuX4Zolylar96YCHr3FKwudczKDoVRIvSUOXp5\nYEjSUi02S5ByWGkJC2VpFc1LJ531LVVLZT3V1G+s/uT0/PwPdXiMwtHUZNue\nPwMVJXJM7yI2JegokBXefyHGFGy8pVLz7yZ1XnMinyxMBfiYnE+moY9Kp/X0\nzMauEy4aw7dOIKBe32IUeySjUlVSPCqhSmSJ1E03urn7gKe3gGrtUWXYf6ir\nvHHS2KVvcYCmhZSWCKdyxGYH3FhwEXU+ygUeggpYqj+DeUd9W4DzCONqb2if\n2aSgEQxq6T5dogIcK6Wbc+a74A5ez2JN0T/Aa/X/u5SJ7U6Y1kYyDb65bHKl\n9jCvscok7GtUdd/bhueMHvmfiDoRSja0gJ4rPn76zjJbC7otoarXvtiudKL+\nB1W9LcEc2JNjIZWxk6kLU5ZUPe8fjzHXpZVTQ0JaelcvSGLbY3XYjGV3d9/N\no8Pv+ZnEdYjsIiA7zodBvVQkgJJQEK0dDZbXgW1f62+nJDtXacsfrUWkayXM\nAr0b\r\n=QF5D\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0-6_1529038701232_0.6490856670916294"}},"10.0.0-7":{"name":"otplib","version":"10.0.0-7","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","typings":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:bundles":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json","build:modules":"rollup -c scripts/rollup.config.js","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.13.5","rimraf":"^2.6.1","rollup":"^0.60.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":[],"modulePaths":["<rootDir>/packages/"],"roots":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/"]},"repl":[{"name":"otplib","module":"./dist/otplib/index"}],"readme":"# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![TypeScript Support][type-ts-badge]][type-ts-link]\n\n---\n\n<!-- TOC depthFrom:2 -->\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n  - [Type Definitions](#type-definitions)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n    - [Using with Expo.io](#using-with-expoio)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed--secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n  - [Getting Time Remaining / Time Used](#getting-time-remaining--time-used)\n  - [Exploring with local-repl](#exploring-with-local-repl)\n- [Contributing](#contributing)\n- [License](#license)\n\n<!-- /TOC -->\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226]\nand [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238],\nand are tested against the test vectors provided in their respective RFC specifications.\nThese datasets can be found in the `packages/tests` folder.\n\n- [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n- [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator),\nand includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n- [Documentation][project-docs]\n- [Demo][project-web]\n- [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n- [List of available methods][type-ts-file] (documented via TypeScript)\n- [Examples][project-examples]\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n\n# Additional dependencies for TypeScript\n$ npm install @types/node\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n### Type Definitions\n\n`TypeScript` support was introduced in `v10.0.0`\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes.\nPlease check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information,\nespecially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions\nin the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD'\n// Alternatively: const secret = otplib.authenticator.generateSecret();\n\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(token, secret);\n// or\nconst isValid = otplib.authenticator.verify({ token, secret })\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Important**: If you import the libraries directly, you will have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\nFor **example**:\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nauthenticator.options = { crypto };\n\n// Or if you're using the other OTP methods\n// hotp.options = { crypto }\n// totp.options = { crypto }\n\nconst secret = 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD'\nconst token = authenticator.generate(secret); // 556443\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n\n// Alternatively, you can get it from the default module as well\nimport otplib from 'otplib';\nconst HOTP = otplib.hotp.HOTP\nconst TOTP = otplib.totp.TOTP\nconst Authenticator = otplib.authenticator.Authenticator\n```\n\n#### Using with Expo.io\n\n[Expo](https://expo.io) does not contain a `randomBytes` implementation\nwithin the platform-provided crypto. As such, you should avoid\nusing `otplib.authenticator.generateSecret();` and generate your own secrets instead.\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n- Download from [gh-pages][project-lib].\n- Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^10.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in\nrecent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\nThe approximate **output sizes** are as follows:\n\n- with node crypto: ~311Kb\n- with alternative crypto: ~106Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific\nenvironment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                | description                                   |\n| ----------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option                       | Type             | Defaults                          | Description                                                                                                                                                                                |\n| ---------------------------- | ---------------- | --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| algorithm                    | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                                    |\n| createHmacSecret             | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                                    |\n| crypto                       | object           | node crypto                       | Crypto module to use.                                                                                                                                                                      |\n| digits                       | integer          | 6                                 | The length of the token                                                                                                                                                                    |\n| encoding                     | string           | 'ascii' ('hex' for authenticator) | The encoding of secret which is given to digest                                                                                                                                            |\n| epoch (totp, authenticator)  | integer          | null                              | Starting time since the UNIX epoch (seconds). <br /> epoch format is non-javascript. i.e. `Date.now() / 1000`                                                                              |\n| step (totp, authenticator)   | integer          | 30                                | Time step (seconds)                                                                                                                                                                        |\n| window (totp, authenticator) | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. <br /> If integer, same value will be used for both. <br /> Alternatively, define array: `[previous, future]` |\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```txt\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected\nlength for respective algorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use\nother base32 encoding methods (like Crockford's Base 32)\nbut it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan\ninstead of manually entering the secret. Google Authenticator and similar apps\ntake in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n### Getting Time Remaining / Time Used\n\nHelper methods for getting the remaining time and used time within a validity period\nof a `totp` or `authenticator` token were introduced in `v10.0.0`.\n\n```js\nauthenticator.timeUsed(); // or totp.timeUsed();\nauthenticator.timeRemaining(); // or totp.timeRemaining();\n\n// The start of a new token would be when:\n// - timeUsed() === 0\n// - timeRemaining() === step\n```\n\n### Exploring with local-repl\n\nIf you'll like to explore the library with `local-repl` you can do so as well.\n\n```bash\n$ npm install\n$ npm run build\n\n$ npx local-repl\n# You should see something like:\n# Node v8.9.4, local-repl 4.0.0\n# otplib 10.0.0\n# Context: otplib\n# [otplib] >\n\n$ [otplib] > secret = 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD'\n$ [otplib] > otplib.authenticator.generate(secret)\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n[![Support Project][coffee-badge]][coffee-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&longCache=true\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[project-examples]: https://github.com/yeojz/otplib/tree/master/examples\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n[coffee-badge]: https://img.shields.io/badge/%E2%98%95%EF%B8%8F-buy%20me%20a%20coffee-orange.svg?longCache=true&style=flat-square\n[coffee-link]: https://ko-fi.com/geraldyeo\n[type-ts-badge]: https://img.shields.io/badge/typedef-.d.ts-blue.svg?style=flat-square&longCache=true\n[type-ts-link]: https://github.com/yeojz/otplib/tree/master/packages/types-ts\n[type-ts-file]: https://github.com/yeojz/otplib/blob/master/packages/types-ts/index.d.ts\n","readmeFilename":"README.md","_id":"otplib@10.0.0-7","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-Zq2TDEcZMJdmNXRvQDyJxTSwAJzwQQAg2DnvQ9BQvM7WO8E7aec6RcUGiVoQ8XGM0uIXY9l6r3BZvwi2WutyRQ==","shasum":"d2be54b4bb2d2871f1b52955067a5b1193d0887a","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0-7.tgz","fileCount":12,"unpackedSize":195557,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbJftICRA9TVsSAnZWagAAdfkP/1WY11fyWUWsnF+lS4SQ\nI0yjcVZZ2Kj0bAEg0Il5ygRHjDEbCGGqOVGFvfuwpIXmThzamLC+ZABxivYX\nTQdconicmYJ5RnjHitgajgJ7AUZUtHerfUSQiaezM4IpEvGrZxMmzeOj5mGM\noZW6symD9+5Jm+52DJQYtYj5BcRA9YbTwpVxb+om+q+pKf9fBxp65Tq71HKY\nt+iqsg/qz/RYjF6KJ1NC8k0bN7qPa4EoE+mOQBCWybDQ4hYHj4P7tF5SnCX3\nmudB/yePYuJhUSFzrAkgtVgzykYcA0+HHFAZeWzQ6YZxfHMNnI3nC2rwpI22\niJqXdYdiqogISwHXEz7iYJuY1KanmlY3Ogj3KW/FIVBIFVhS9t3wEpen2Omh\nZd9yECTDZ+PK502zqc966cIHxm4rcK59spYQ2UufqrRkHttSNCLkSmRQtQqs\nhro4J54dtTt20UCwehug9XUaAH0nNeTZUpYICjjd2PsT0AKx9YDmP8ndj5dQ\nlC4FU8odR6Es3E3W82GVYi+Nz/J9w1rbR4PxHrewWsSLmA1h/BhGu6cubgj8\nNo2zpyyKTvfAr60uwqi/ek1DHL/H/uY/0WhcW8GB+ouZRxJvxywhvTwbFb/K\nJkwjiDLPw/Rp906SLsRJkNV31p6KI2lrwCxTy3oIHWYdnICxeW3QatSQ3Wjm\n/7Wt\r\n=zlIM\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0-7_1529215814848_0.5637541261083319"}},"10.0.0":{"name":"otplib","version":"10.0.0","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","typings":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:bundles":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json","build:modules":"rollup -c scripts/rollup.config.js","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^4.18.2","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.13.5","rimraf":"^2.6.1","rollup":"^0.60.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":[],"modulePaths":["<rootDir>/packages/"],"roots":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/"]},"repl":[{"name":"otplib","module":"./dist/otplib/index"}],"_id":"otplib@10.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-6YoW3o3pOfvEBCNTtohJFy8znAAlqBJqJYS6raikkqEL1xTwKW0avHXl7PklR4/3qgAnM9Z5xH7ZN54Z4Z3S9g==","shasum":"bf7f85a7552fa0440ada189f6d85f32850260120","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.0.tgz","fileCount":12,"unpackedSize":195541,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbJhMFCRA9TVsSAnZWagAAkl0P/0U4g2wMl5maM6HWflbN\nXU3H4RDaoBVPJwXbt0LoVrZEbebIoqG+6JXbznm4uokBfPKUvWFpgBEKGnhg\n7SJzEIQzzG8hgJok6Zd7apoYbvHp23WnE5TkPOflpMWg53SsZnn2G8mEG+9U\n7EoTCvmklFc6zHKvFwV52rno4Ec88fnG+xxlD2ZbbPXCCnjOQMPaM+tSieEL\nthteaF1abWkph+on2JlKR5KkFQMqryhDBbEEzd9vaOqlinQUhqnJii+BbMsm\nyQ2yFOFxrD0EmFpyX+q6kPHFnzzRIIs8iCG+YxpVgOSBSsDTw+H0vsOafwbu\n35I99VQj3Ml3St7F0udI2cG2H918FcbhGpfVZpj93ltzobw9bOJrtCEdqrvo\nGvGRZ7zG2HEe3hV+i87qXwNvft5fve04Dgq8YFqs0iTlflLE8LdXfHNpOUG/\npLuXHIgrsHV/I8k+Gl6lasEQuo5Rfx0aEWqk38ibSjhGkVCQCIUK7Rz6Z/yK\njJ5ab88RqjtVf0E1AKc3CgYQ/uEUcbc9rtqjE8zdXUaBwosGrfgEpFtFlg39\ncJd/KuvlJRm8N77hIy84Kq3IULmgnhdBKYSixPQlUvARnFkUnn89EM1ECGDF\nLV41w+N2PWVdjSAlYlua1CtCY28njJ3ZrXnzX/ZZhDhAMeJzk6xlYs9LfDm+\nBIbk\r\n=6bUg\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.0_1529221891660_0.3349626814480313"}},"10.0.1":{"name":"otplib","version":"10.0.1","description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","main":"./index.js","typings":"./index.d.ts","scripts":{"build":"./scripts/build.sh","build:bundles":"webpack --config ./scripts/webpack.config.js","build:docs":"jsdoc --configure jsdoc.json","build:modules":"rollup -c scripts/rollup.config.js","clean":"rimraf dist coverage docs","coveralls":"cat ./coverage/lcov.info | coveralls","lint:js":"eslint \"packages/**/**?(.spec|).js\"","lint:format":"prettier --write \"{packages,scripts,site/scripts,site/public}/**/**.js\"","lint:ts":"dtslint ./packages/types-ts","test":"jest --coverage","test:watch":"jest --coverage --watch"},"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"license":"MIT","bugs":{"url":"https://github.com/yeojz/otplib/issues"},"homepage":"https://yeojz.github.io/otplib","devDependencies":{"babel-loader":"^7.1.3","babel-plugin-module-resolver":"^3.1.0","babel-preset-env":"^1.6.1","coveralls":"^3.0.0","create-hmac":"^1.1.4","dtslint":"^0.3.0","eslint":"^5.0.0","eslint-config-prettier":"^2.9.0","eslint-plugin-prettier":"^2.6.0","jest":"^23.0.0","jsdoc":"^3.4.3","minami":"^1.1.1","prettier":"1.13.7","rimraf":"^2.6.1","rollup":"^0.62.0","rollup-plugin-cleanup":"^2.0.0","rollup-plugin-node-resolve":"^3.0.0","webpack":"^4.12.0","webpack-cli":"^3.0.3"},"dependencies":{"thirty-two":"1.0.2"},"jest":{"coverageDirectory":"./coverage/","coveragePathIgnorePatterns":[],"modulePaths":["<rootDir>/packages/"],"roots":["<rootDir>/packages/"],"resetMocks":true,"setupFiles":[],"testPathIgnorePatterns":["/node_modules/"]},"repl":[{"name":"otplib","module":"./dist/otplib/index"}],"_id":"otplib@10.0.1","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"geraldyeo","email":"gerald@fusedthought.com"},"dist":{"integrity":"sha512-FtbKelYtio2af5LDBWz3bWS6T03taHJAIv3evMrXuvoM50z5jbWoEMabPCk0A0JqiLGBzAIDJWfR9gSsvRYZHA==","shasum":"d37fcd13203298c0b94937d55c5a3527ed877875","tarball":"https://registry.npmjs.org/otplib/-/otplib-10.0.1.tgz","fileCount":12,"unpackedSize":195735,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbVSNlCRA9TVsSAnZWagAArM0P+gMGJRqlG+8ZJx3j+g7t\nd1iQ/5ld21141jskod+rcaemcpcxFfJZlQU19Epcl6ym6xDcxPFh7p4rrAC8\n7pLaRGGI98fHGj+rj8zaZ11u/vW0/NF16K/i8CylFBrfBipt4S7iPRVDpxy8\nETZtfvKXrCQWBw8rzmBekq/TIKcpc26vYQvhGpuEHsJ76KO2N7lYJ1ff2L9Z\nnxCpTPgTQLuW+g9kIAO7KCOgcMWtMIIUbzXOnecVn55LJTilbtbBQxDT46A0\nPr3T33af/gZFoWYga9SKt3oVFvdcAJv73hkRH3j8Xe9DzSYC0lv78uxXYes5\nYpyF0wmnAHjCNf7WFfxGYEr39+gogftx73ykWQKdXZyM+zh7T1o/qg8dgCye\nAr5ZFKUqAHOS6n/rSN56tEq/7VjcurXP4hAJuf1WwbmjSilQm2wBZEretzeX\n1SL/KYB2lNtzeAHK2zN/vFl7URbUHTcqXwrIKXD37CRV7sh65wBpg5vx3o4J\nkNdFH7Pw/Q8uH7ZzlzMHtlHJSCrZnnsQI/fk8IQXTJ2mEBf8VbsFMzwvYGOK\nP8jyzhnwjQNQ0ilqKQ9wauDOZvVWDmsSfMI3YTFLreE9XXkLGo1XLWhE78HH\nyHwCeEpIxd/Q6OIDuDAwr7TtPf5c/eCmSfcigU4B2izZzCW6+2+Xz60zqdpN\njFmY\r\n=Su3k\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"geraldyeo","email":"contact@fusedthought.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/otplib_10.0.1_1532306277763_0.45563291052977317"}}},"description":"HMAC-based (HOTP) and Time-based (TOTP) One-Time Password library","homepage":"https://yeojz.github.io/otplib","keywords":["otp","totp","hotp","one time password","google authenticator","authenticator","authentication","2FA","2 factor","node","browser"],"repository":{"type":"git","url":"git+https://github.com/yeojz/otplib.git"},"author":{"name":"Gerald Yeo","email":"contact@fusedthought.com"},"bugs":{"url":"https://github.com/yeojz/otplib/issues"},"readme":"# otplib\n\n> Time-based (TOTP) and HMAC-based (HOTP) One-Time Password library\n\n[![npm][npm-badge]][npm-link]\n[![Build Status][circle-badge]][circle-link]\n[![Coverage Status][coveralls-badge]][coveralls-link]\n[![npm downloads][npm-downloads-badge]][npm-link]\n[![TypeScript Support][type-ts-badge]][type-ts-link]\n\n---\n\n<!-- TOC depthFrom:2 -->\n\n- [About](#about)\n- [Demo and Documentation](#demo-and-documentation)\n- [Installation](#installation)\n  - [Type Definitions](#type-definitions)\n- [Upgrading](#upgrading)\n- [Getting Started](#getting-started)\n  - [In node](#in-node)\n    - [Using specific OTP implementations](#using-specific-otp-implementations)\n    - [Using classes](#using-classes)\n    - [Using with Expo.io](#using-with-expoio)\n  - [In browser](#in-browser)\n    - [Browser Compatibility](#browser-compatibility)\n- [Advanced Usage](#advanced-usage)\n  - [Core](#core)\n  - [Other Bundles](#other-bundles)\n- [Notes](#notes)\n  - [Setting Custom Options](#setting-custom-options)\n    - [Available Options](#available-options)\n  - [Seed / secret length](#seed--secret-length)\n  - [Google Authenticator](#google-authenticator)\n    - [Difference between Authenticator and TOTP](#difference-between-authenticator-and-totp)\n    - [Base32 Keys and RFC3548](#base32-keys-and-rfc3548)\n    - [Displaying a QR code](#displaying-a-qr-code)\n  - [Getting Time Remaining / Time Used](#getting-time-remaining--time-used)\n  - [Exploring with local-repl](#exploring-with-local-repl)\n- [Contributing](#contributing)\n- [License](#license)\n\n<!-- /TOC -->\n\n## About\n\n`otplib` is a JavaScript One Time Password (OTP) library.\nIt provides both functional and class based interfaces for\ndealing with OTP generation and verification.\n\nIt implements both [HOTP][rfc-4226-wiki] - [RFC 4226][rfc-4226]\nand [TOTP][rfc-6238-wiki] - [RFC 6238][rfc-6238],\nand are tested against the test vectors provided in their respective RFC specifications.\nThese datasets can be found in the `packages/tests` folder.\n\n- [RFC 4226 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc4226.js)\n- [RFC 6238 Dataset](https://github.com/yeojz/otplib/blob/master/packages/tests/rfc6238.js)\n\nThis library is also compatible with [Google Authenticator](https://github.com/google/google-authenticator),\nand includes additional methods to allow you to work with Google Authenticator.\n\n## Demo and Documentation\n\n- [Documentation][project-docs]\n- [Demo][project-web]\n- [FAQ / Common Issues](https://github.com/yeojz/otplib/wiki/FAQ)\n- [List of available methods][type-ts-file] (documented via TypeScript)\n- [Examples][project-examples]\n\n## Installation\n\nInstall the library via:\n\n```bash\n$ npm install otplib --save\n\n# To install the Release Candidates:\n$ npm install otplib@next --save\n\n# Additional dependencies for TypeScript\n$ npm install @types/node\n```\n\n| Release Type      | Version                            |\n| :---------------- | :--------------------------------- |\n| Current / Stable  | [![npm][npm-badge]][npm-link]      |\n| Release Candidate | [![npm][npm-next-badge]][npm-link] |\n\n### Type Definitions\n\n`TypeScript` support was introduced in `v10.0.0`\n\n## Upgrading\n\nThis library follows `semver`. As such, major version bumps usually mean API changes or behavior changes.\nPlease check [upgrade notes](https://github.com/yeojz/otplib/wiki/upgrade-notes) for more information,\nespecially before making any major upgrades.\n\nYou might also want to check out the release notes associated with each tagged versions\nin the [releases](https://github.com/yeojz/otplib/releases) page.\n\n## Getting Started\n\n### In node\n\n```js\nimport otplib from 'otplib';\n\nconst secret = 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD'\n// Alternatively: const secret = otplib.authenticator.generateSecret();\n\nconst token = otplib.authenticator.generate(secret);\n\nconst isValid = otplib.authenticator.check(token, secret);\n// or\nconst isValid = otplib.authenticator.verify({ token, secret })\n```\n\n#### Using specific OTP implementations\n\nIf you want to include a specific OTP specification, you can import it directly:\n\n```js\nimport hotp from 'otplib/hotp';\nimport totp from 'otplib/totp';\nimport authenticator from 'otplib/authenticator';\n```\n\n**Important**: If you import the libraries directly, you will have to provide a crypto\nsolution (this is to allow custom crypto solutions), as long as they implement `createHmac` and `randomBytes`.\nTake a look at the [browser implementation](https://github.com/yeojz/otplib/blob/master/packages/otplib-browser)\nof this package as an example.\n\nFor **example**:\n\n```js\nimport authenticator from 'otplib/authenticator';\nimport crypto from 'crypto';\n\nauthenticator.options = { crypto };\n\n// Or if you're using the other OTP methods\n// hotp.options = { crypto }\n// totp.options = { crypto }\n\nconst secret = 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD'\nconst token = authenticator.generate(secret); // 556443\n```\n\n#### Using classes\n\nFor ease of use, the default exports are all instantiated instances of their respective classes.\nYou can access the original classes via it's same name property of the instantiated class.\n\ni.e\n\n```js\nimport hotp from 'otplib/hotp';\nconst HOTP = hotp.HOTP;\n// const inst = new HOTP();\n\nimport totp from 'otplib/totp';\nconst TOTP = totp.TOTP;\n// const inst = new TOTP();\n\nimport authenticator from 'otplib/authenticator';\nconst Authenticator = authenticator.Authenticator;\n// const inst = new Authenticator();\n\n// Alternatively, you can get it from the default module as well\nimport otplib from 'otplib';\nconst HOTP = otplib.hotp.HOTP\nconst TOTP = otplib.totp.TOTP\nconst Authenticator = otplib.authenticator.Authenticator\n```\n\n#### Using with Expo.io\n\n[Expo](https://expo.io) does not contain a `randomBytes` implementation\nwithin the platform-provided crypto. As such, you should avoid\nusing `otplib.authenticator.generateSecret();` and generate your own secrets instead.\n\n### In browser\n\nA browser-targeted version has been compiled.\nYou'll need to add the following scripts to your code:\n\n```html\n<script src=\"otplib-browser.js\"></script>\n\n<script type=\"text/javascript\">\n   // window.otplib\n</script>\n```\n\nYou can find it in `node_modules/otplib` after you install.\n\nAlternatively you can\n\n- Download from [gh-pages][project-lib].\n- Use unpkg.com\n\n```html\n<script src=\"https://unpkg.com/otplib@^10.0.0/otplib-browser.js\"></script>\n```\n\nFor a live example, the [project site][project-web] has been built using `otplib-browser.js`.\nThe source code can be found [here](https://github.com/yeojz/otplib/tree/master/site).\n\n#### Browser Compatibility\n\nIn order to reduce the size of the browser package, the `crypto` package has been replaced with\nan alternative implementation. The current implementation depends on [Uint8Array][mdn-uint8array]\nand the browser's native [crypto][mdn-crypto] methods, which may only be available in\nrecent browser versions.\n\nTo find out more about the replacements, you can take a look at `packages/otplib-browser/crypto.js`\n\nThe approximate **output sizes** are as follows:\n\n- with node crypto: ~311Kb\n- with alternative crypto: ~106Kb\n\n## Advanced Usage\n\nIhis library been split and classified into 6 core files with other specific\nenvironment based bundles provided.\n\n### Core\n\n| file                                                                                     | description                                                     |\n| ---------------------------------------------------------------------------------------- | --------------------------------------------------------------- |\n| [authenticator.js](https://yeojz.github.io/otplib/docs/module-otplib-authenticator.html) | Google Authenticator bindings                                   |\n| [core.js](https://yeojz.github.io/otplib/docs/module-otplib-core.html)                   | Functions for various steps in the OTP generation process       |\n| [hotp.js](https://yeojz.github.io/otplib/docs/module-otplib-hotp.html)                   | Wraps core functions into an instantiated HOTP class            |\n| [otplib.js](https://yeojz.github.io/otplib/docs/module-otplib.html)                      | Library entry file, containing all instances with crypto set up |\n| [totp.js](https://yeojz.github.io/otplib/docs/module-otplib-totp.html)                   | Wraps core functions into an instantiated TOTP class            |\n| [utils.js](https://yeojz.github.io/otplib/docs/module-otplib-utils.html)                 | Helper utilities                                                |\n\n### Other Bundles\n\n| file                                                                                | description                                   |\n| ----------------------------------------------------------------------------------- | --------------------------------------------- |\n| [otplib-browser.js](https://yeojz.github.io/otplib/docs/module-otplib-browser.html) | Browser compatible package built with webpack |\n\nFor more information about the functions, check out the [documentation][project-docs].\n\n## Notes\n\n### Setting Custom Options\n\nAll instantiated classes will have their options inherited from their respective options\ngenerator. i.e. HOTP from `hotpOptions` and TOTP/Authenticator from `totpOptions`.\n\nAll OTP classes have an object setter and getter method to override these default options.\n\nFor example,\n\n```js\nimport otplib from 'otplib';\n\n// setting\notplib.authenticator.options = {\n  step: 30,\n  window: 1\n};\n\n// getting\nconst opts = otplib.authenticator.options;\n\n// reset to default\notplib.authenticator.resetOptions();\n```\n\n#### Available Options\n\n| Option                       | Type             | Defaults                          | Description                                                                                                                                                                                |\n| ---------------------------- | ---------------- | --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| algorithm                    | string           | 'sha1'                            | Algorithm used for HMAC                                                                                                                                                                    |\n| createHmacSecret             | function         | hotpSecret, totpSecret            | Transforms the secret and applies any modifications like padding to it.                                                                                                                    |\n| crypto                       | object           | node crypto                       | Crypto module to use.                                                                                                                                                                      |\n| digits                       | integer          | 6                                 | The length of the token                                                                                                                                                                    |\n| encoding                     | string           | 'ascii' ('hex' for authenticator) | The encoding of secret which is given to digest                                                                                                                                            |\n| epoch (totp, authenticator)  | integer          | null                              | Starting time since the UNIX epoch (seconds). <br /> epoch format is non-javascript. i.e. `Date.now() / 1000`                                                                              |\n| step (totp, authenticator)   | integer          | 30                                | Time step (seconds)                                                                                                                                                                        |\n| window (totp, authenticator) | integer or array | 0                                 | Tokens in the previous and future x-windows that should be considered valid. <br /> If integer, same value will be used for both. <br /> Alternatively, define array: `[previous, future]` |\n\n### Seed / secret length\n\nIn [RFC 6238][rfc-6238], the secret / seed length for different algorithms is predefined:\n\n```txt\nHMAC-SHA1 - 20 bytes\nHMAC-SHA256 - 32 bytes\nHMAC-SHA512 - 64 bytes\n```\n\nAs such, the length of the secret is padded and sliced according to the expected\nlength for respective algorithms.\n\n### Google Authenticator\n\n#### Difference between Authenticator and TOTP\n\nThe default encoding option has been set to `hex` (Authenticator) instead of `ascii` (TOTP).\n\n#### Base32 Keys and RFC3548\n\nGoogle Authenticator requires keys to be base32 encoded.\nIt also requires the base32 encoder to be [RFC 3548][rfc-3548] compliant.\n\nOTP calculation will still work should you want to use\nother base32 encoding methods (like Crockford's Base 32)\nbut it will NOT be compatible with Google Authenticator.\n\n```js\nimport authenticator from 'otplib/authenticator';\n\nconst secret = authenticator.generateSecret(); // base 32 encoded hex secret key\nconst token = authenticator.generate(secret);\n```\n\n#### Displaying a QR code\n\nYou may want to generate and display a QR Code so that users can scan\ninstead of manually entering the secret. Google Authenticator and similar apps\ntake in a QR code that holds a URL with the protocol `otpauth://`,\nwhich you get from `otplib.authenticator.keyuri`.\n\nWhile this library provides the \"otpauth\" uri, you'll need a library to generate the QR Code image.\n\nAn example is shown below:\n\n```js\n// npm install qrcode\nimport qrcode from 'qrcode';\nimport otplib from 'otplib';\n\nconst otpauth = otplib.authenticator.keyuri('user', 'service', secret);\n\nqrcode.toDataURL(otpauth, (err, imageUrl) => {\n  if (err) {\n    console.log('Error with QR');\n    return;\n  }\n  console.log(imageUrl);\n});\n```\n\n### Getting Time Remaining / Time Used\n\nHelper methods for getting the remaining time and used time within a validity period\nof a `totp` or `authenticator` token were introduced in `v10.0.0`.\n\n```js\nauthenticator.timeUsed(); // or totp.timeUsed();\nauthenticator.timeRemaining(); // or totp.timeRemaining();\n\n// The start of a new token would be when:\n// - timeUsed() === 0\n// - timeRemaining() === step\n```\n\n### Exploring with local-repl\n\nIf you'll like to explore the library with `local-repl` you can do so as well.\n\n```bash\n$ npm install\n$ npm run build\n\n$ npx local-repl\n# You should see something like:\n# Node v8.9.4, local-repl 4.0.0\n# otplib 10.0.0\n# Context: otplib\n# [otplib] >\n\n$ [otplib] > secret = 'KVKFKRCPNZQUYMLXOVYDSQKJKZDTSRLD'\n$ [otplib] > otplib.authenticator.generate(secret)\n```\n\n## Contributing\n\nCheck out: [CONTRIBUTING.md][pr-welcome-link]\n\n[![Support Project][coffee-badge]][coffee-link]\n[![PRs Welcome][pr-welcome-badge]][pr-welcome-link]\n\n## License\n\n`otplib` is [MIT licensed](./LICENSE)\n\n<img width=\"150\" src=\"https://yeojz.github.io/otplib/otplib.png\" />\n\n[npm-badge]: https://img.shields.io/npm/v/otplib.svg?style=flat-square\n[npm-link]: https://www.npmjs.com/package/otplib\n[npm-next-badge]: https://img.shields.io/npm/v/otplib/next.svg?style=flat-square\n[npm-downloads-badge]: https://img.shields.io/npm/dt/otplib.svg?style=flat-square\n[circle-badge]: https://img.shields.io/circleci/project/github/yeojz/otplib/master.svg?style=flat-square\n[circle-link]: https://circleci.com/gh/yeojz/otplib\n[coveralls-badge]: https://img.shields.io/coveralls/yeojz/otplib/master.svg?style=flat-square\n[coveralls-link]: https://coveralls.io/github/yeojz/otplib\n[pr-welcome-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&longCache=true\n[pr-welcome-link]: https://github.com/yeojz/otplib/blob/master/CONTRIBUTING.md\n[mdn-uint8array]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n[mdn-crypto]: https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto\n[project-web]: https://yeojz.github.io/otplib\n[project-docs]: https://yeojz.github.io/otplib/docs\n[project-lib]: https://github.com/yeojz/otplib/tree/gh-pages/lib\n[project-examples]: https://github.com/yeojz/otplib/tree/master/examples\n[rfc-4226]: http://tools.ietf.org/html/rfc4226\n[rfc-6238]: http://tools.ietf.org/html/rfc6238\n[rfc-3548]: http://tools.ietf.org/html/rfc3548\n[rfc-4226-wiki]: http://en.wikipedia.org/wiki/HMAC-based_One-time_Password_Algorithm\n[rfc-6238-wiki]: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\n[donate-badge]: https://img.shields.io/badge/donate-%3C3-red.svg?longCache=true&style=flat-square\n[donate-link]: https://www.paypal.me/yeojz\n[coffee-badge]: https://img.shields.io/badge/%E2%98%95%EF%B8%8F-buy%20me%20a%20coffee-orange.svg?longCache=true&style=flat-square\n[coffee-link]: https://ko-fi.com/geraldyeo\n[type-ts-badge]: https://img.shields.io/badge/typedef-.d.ts-blue.svg?style=flat-square&longCache=true\n[type-ts-link]: https://github.com/yeojz/otplib/tree/master/packages/types-ts\n[type-ts-file]: https://github.com/yeojz/otplib/blob/master/packages/types-ts/index.d.ts\n","readmeFilename":"README.md","users":{"soarez":true,"shanewholloway":true,"ceejbot":true,"goulash1971":true,"evalon":true,"atton16":true,"9kopb":true},"license":"MIT","_attachments":{},"_etag":"W/\"06aca0f28c9c6b54d9dbea536b911215\"","_lastModified":"Mon, 23 Jul 2018 00:38:01 GMT"}